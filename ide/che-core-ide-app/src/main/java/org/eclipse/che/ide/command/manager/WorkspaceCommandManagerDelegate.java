/*******************************************************************************
 * Copyright (c) 2012-2016 Codenvy, S.A.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Codenvy, S.A. - initial API and implementation
 *******************************************************************************/
package org.eclipse.che.ide.command.manager;

import com.google.inject.Inject;
import com.google.inject.Singleton;

import org.eclipse.che.api.core.model.machine.Command;
import org.eclipse.che.api.machine.shared.dto.CommandDto;
import org.eclipse.che.api.promises.client.Function;
import org.eclipse.che.api.promises.client.FunctionException;
import org.eclipse.che.api.promises.client.Promise;
import org.eclipse.che.api.workspace.shared.dto.WorkspaceDto;
import org.eclipse.che.ide.api.app.AppContext;
import org.eclipse.che.ide.api.command.CommandImpl;
import org.eclipse.che.ide.api.command.CommandManager;
import org.eclipse.che.ide.api.command.CommandType;
import org.eclipse.che.ide.api.workspace.WorkspaceServiceClient;
import org.eclipse.che.ide.dto.DtoFactory;

import java.util.ArrayList;
import java.util.List;

/**
 * Responsible for managing the commands which are stored with workspace.
 *
 * @author Artem Zatsarynnyi
 */
@Singleton
class WorkspaceCommandManagerDelegate {

    private final DtoFactory             dtoFactory;
    private final WorkspaceServiceClient workspaceServiceClient;
    private final AppContext             appContext;

    @Inject
    WorkspaceCommandManagerDelegate(DtoFactory dtoFactory,
                                    WorkspaceServiceClient workspaceServiceClient,
                                    AppContext appContext) {
        this.dtoFactory = dtoFactory;
        this.workspaceServiceClient = workspaceServiceClient;
        this.appContext = appContext;
    }

    /**
     * Returns commands.
     *
     * @param workspaceId
     */
    Promise<List<CommandImpl>> getCommands(String workspaceId) {
        return workspaceServiceClient.getCommands(workspaceId).then(new Function<List<CommandDto>, List<CommandImpl>>() {
            @Override
            public List<CommandImpl> apply(List<CommandDto> arg) throws FunctionException {
                List<CommandImpl> commands = new ArrayList<>();

                for (Command command : arg) {
                    commands.add(new CommandImpl(command));
                }

                return commands;
            }
        });
    }

    /**
     * Creates new command of the specified type.
     * <p><b>Note</b> that command's name will be generated by {@link CommandManager}
     * and command line will be provided by an appropriate {@link CommandType}.
     */
    Promise<CommandImpl> createCommand(final CommandImpl command) {
        final CommandDto commandDto = dtoFactory.createDto(CommandDto.class)
                                                .withName(command.getName())
                                                .withCommandLine(command.getCommandLine())
                                                .withType(command.getType())
                                                .withAttributes(command.getAttributes());

        return workspaceServiceClient.addCommand(appContext.getWorkspaceId(), commandDto).then(new Function<WorkspaceDto, CommandImpl>() {
            @Override
            public CommandImpl apply(WorkspaceDto arg) throws FunctionException {
                return command;
            }
        });
    }

    /**
     * Updates the command with the specified {@code name} by replacing it with the given {@code command}.
     * <p><b>Note</b> that name of the updated command may differ from the name provided by the given {@code command}
     * in order to prevent name duplication.
     */
    Promise<CommandImpl> updateCommand(final CommandImpl command) {
        final CommandDto commandDto = dtoFactory.createDto(CommandDto.class)
                                                .withName(command.getName())
                                                .withCommandLine(command.getCommandLine())
                                                .withType(command.getType())
                                                .withAttributes(command.getAttributes());

        return workspaceServiceClient.updateCommand(appContext.getWorkspaceId(), command.getName(), commandDto)
                                     .then(new Function<WorkspaceDto, CommandImpl>() {
                                         @Override
                                         public CommandImpl apply(WorkspaceDto arg) throws FunctionException {
                                             return command;
                                         }
                                     });
    }

    /** Removes the command with the specified {@code commandName}. */
    Promise<Void> removeCommand(String commandName) {
        return workspaceServiceClient.deleteCommand(appContext.getWorkspaceId(), commandName).then(new Function<WorkspaceDto, Void>() {
            @Override
            public Void apply(WorkspaceDto arg) throws FunctionException {
                return null;
            }
        });
    }
}
